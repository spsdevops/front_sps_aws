name: CI

permissions:
  id-token: write
  contents: read    


on:
  push:
    branches:
      - ftr/**
      - feat/**
  workflow_dispatch:


env:  
  # MODIFICAR SEGUN TU SERVICIO  
  # Esta variable solo se modifica en desarrollo
  AWS_ECS_CLUSTER: hello-world

  SERVICE_NAME: front-hello-world
  SERVICE_HEALTH_PATH: /
  SERVICE_HEALTH_CODE: 200
  SERVICE_HEALTH_COUNT: 5
  SERVICE_HEALTH_TIMEOUT: 6
  SERVICE_HEALTH_INTERVALO: 30
  SERVICE_REPLICAS: 1
  AWS_R53_SUB_DOMAIN: "webs"

  BUILDPACK_LANGUAGE: paketo-buildpacks/nodejs@0.12.0
  BUILDPACK_BUILDER: paketobuildpacks/builder:base

  # Tamaño de las tareas
  TASK_CPU: 512
  TASK_MEMORY: 1024

  # SonarQube
  SONAR_PROJECT_KEY: front-hello-world
  SONAR_SCAN: false  

  # Variables exclusivas de servicios WEB
  AWS_FRONT_ALB_NUMBER: 1
  AWS_FRONT_ALB_PRIORITY: 1
  OPTIONAL_DOMAIN: ""  

  # Variables exclusivas de servicios API
  AWS_ALB_NUMBER: ""
  AWS_ALB_PRIORITY: ""

  # CUIDADO ESTAS VARIABLES NORMALMENTE NO SE MODIFICAN  
  SERVICE_PORT: 8080
  AWS_R53_BASE_DOMAIN: "dev.services.montepiedad.com.mx"
  AWS_R53_HOSTED_ZONE_ID: "Z0672533733G01WHHOJA"
  AWS_VPC_NAME: NMP-Servicios
  AWS_DEPLOY_REGION: us-east-1
  AWS_SAM_VERSION: 1.37.0

  DOCKER_ORG: 1775nmpti

  BUILDPACK_ENV_FILE: .buildpackenv
jobs:

  Build:
    name: Build
    runs-on:
    - ubuntu-latest
    steps:
    - id: checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: "Información"
      run: |
        cat INFO.md >> "$GITHUB_STEP_SUMMARY" || echo "No hay archivo INFO.md"

    - name: "Linter Github Workflow"
      run: |
        bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
        ./actionlint -color
      shell: bash
   
    - name: "Palabras prohibidas en código"
      run: |
        ! grep -E 'cfenv' -rn \
        --exclude-dir=.github \
        --include=package.json \
        --include=*.js \
        .

    - name: "CFN Lint - Linter de Cloudformation Frontend"
      if: ${{ env.AWS_R53_SUB_DOMAIN == 'webs'}}
      run: |
        pip install cfn-lint==0.73.2
        cfn-lint service-components.yaml

    - name: "CFN Lint - Linter de Cloudformation Backend"
      if: ${{ env.AWS_R53_SUB_DOMAIN == 'apis'}}
      run: |
        pip install cfn-lint==0.73.2
        cfn-lint service-components.yaml
        cfn-lint api-gateway.yaml

    - uses: actions/setup-java@v3
      if: ${{ (env.JAVA_BUILD_TOOL == 'maven' || env.JAVA_BUILD_TOOL == 'gradle') && env.SONAR_SCAN == 'true'}}
      with:
        distribution: temurin
        java-version: ${{env.JAVA_VERSION}}
        cache: ${{env.JAVA_BUILD_TOOL}}

    - name: Setup Gradle
      if: ${{ env.JAVA_BUILD_TOOL == 'gradle' && env.SONAR_SCAN == 'true'}}
      uses: gradle/gradle-build-action@v2
    
    - name: Execute Gradle SonarQube
      if: ${{ env.JAVA_BUILD_TOOL == 'gradle' && env.SONAR_SCAN == 'true'}}
      run: |
        chmod +x gradlew
        sudo ./gradlew sonar -D "sonar.projectKey=${{env.SONAR_PROJECT_KEY}}" -D "sonar.host.url=${{ secrets.SONARQUBE_HOST }}" -D "sonar.login=${{ secrets.SONARQUBE_TOKEN }}" -D "sonar.projectName=${{env.SONAR_PROJECT_KEY}}"

    - name: Execute Maven SonarQube
      if: ${{ env.JAVA_BUILD_TOOL == 'maven' && env.SONAR_SCAN == 'true'}}
      run: |
        mvn clean verify sonar:sonar -D "sonar.projectKey=${{env.SONAR_PROJECT_KEY}}" -D "sonar.host.url=${{ secrets.SONARQUBE_HOST }}" -D "sonar.login=${{ secrets.SONARQUBE_TOKEN }}" -D "sonar.projectName=${{env.SONAR_PROJECT_KEY}}"
    
    - name: SonarQube Scan
      if: ${{ (env.JAVA_BUILD_TOOL != 'maven' && env.JAVA_BUILD_TOOL != 'gradle') && env.SONAR_SCAN == 'true'}}
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
      with:
        args: >
          -Dsonar.sources=.
          -Dsonar.projectKey=${{env.SONAR_PROJECT_KEY}}

    - uses: docker/login-action@v2
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_PASS }}

    # Configurar paketo https://paketo.io/
    - id: setup-pack
      uses: buildpacks/github-actions/setup-pack@v4.9.0

    # Autenticar en AWS sin utilizar secretos
    - name: Configure AWS Deploy Role 
      uses: aws-actions/configure-aws-credentials@v1-node16
      with: 
        aws-region: ${{ env.AWS_DEPLOY_REGION }}
        role-to-assume: arn:aws:iam::${{secrets.DEV_AWS_ACCOUNT_ID}}:role/github-actions-deploy-role
        role-session-name: ${{ github.event.repository.name }}

    - name: Build image
      run: |
        aws ssm get-parameter --name /${{ env.AWS_ECS_CLUSTER }}/${{ env.SERVICE_NAME }}-build-vars --region ${{env.AWS_DEPLOY_REGION}}  --with-decryption --query "Parameter.Value" --output text >> .buildpackenv || echo "WARNING: No se encontró el parámetro con las variables de construcción."
        buildpacks=()
        for bp in $BUILDPACK_LANGUAGE; do buildpacks+=(--buildpack "$bp"); done
        echo Buikdpack a usar: "${buildpacks[@]}"
        pack build ${{ secrets.DOCKER_HUB_USER }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
        --builder ${{ env.BUILDPACK_BUILDER }} \
        --path . \
        --env-file ${{ env.BUILDPACK_ENV_FILE }} "${buildpacks[@]}"

    - name: Check Docker Repository
      run: |
        echo "Se está validando si existe el repositorio ${{ env.SERVICE_NAME }}"
        TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKER_HUB_USER }}", "password": "${{ secrets.DOCKER_HUB_PASS }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
        IS_PRIVATE=$(curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${{ env.DOCKER_ORG }}/${{ env.SERVICE_NAME }} | jq -r '.is_private')
        if [ "$IS_PRIVATE" = "true" ]; then echo "El repositorio existe"; else echo "El repositorio no existe, solicita su creación" && exit 1; fi
