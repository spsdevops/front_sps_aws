name: Pruebas

permissions:
  id-token: write
  contents: read    
  concurrency: test

on:
  push:
    branches:
      - test
  workflow_dispatch:


env:
  # MODIFICAR SEGUN TU SERVICIO  
  SERVICE_NAME: front-hello-world
  SERVICE_HEALTH_PATH: /
  SERVICE_HEALTH_CODE: 200
  SERVICE_HEALTH_COUNT: 5
  SERVICE_HEALTH_TIMEOUT: 6
  SERVICE_HEALTH_INTERVALO: 30
  SERVICE_REPLICAS: 1

  BUILDPACK_LANGUAGE: paketo-buildpacks/nodejs@0.12.0
  BUILDPACK_BUILDER: paketobuildpacks/builder:base

  # Tamaño de las tareas
  TASK_CPU: 512
  TASK_MEMORY: 1024

  # SonarQube
  SONAR_PROJECT_KEY: front-hello-world
  SONAR_SCAN: false  

  # Variables exclusivas de servicios WEB
  AWS_FRONT_ALB_NUMBER: 1
  AWS_FRONT_ALB_PRIORITY: 1
  AWS_R53_SUB_DOMAIN: "webs"
  OPTIONAL_DOMAIN: ""  

  # Variables exclusivas de servicios API
  AWS_ALB_NUMBER: ""
  AWS_ALB_PRIORITY: ""

  # CUIDADO ESTAS VARIABLES NORMALMENTE NO SE MODIFICAN
  SERVICE_PORT: 8080
  AWS_ECS_CLUSTER: testing
  AWS_R53_BASE_DOMAIN: "test.services.montepiedad.com.mx"
  AWS_R53_HOSTED_ZONE_ID: "Z0384603135SC7BZCW74W"
  AWS_VPC_NAME: NMP-Servicios
  AWS_DEPLOY_REGION: us-east-1
  AWS_SAM_VERSION: 1.37.0

  DOCKER_ORG: 1775nmpti

  BUILDPACK_ENV_FILE: .buildpackenv

jobs:
  Build:
    name: Build
    runs-on:
    - ubuntu-latest
    steps:
    - id: checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: "Información"
      run: |
        cat INFO.md >> "$GITHUB_STEP_SUMMARY" || echo "No hay archivo INFO.md"

    - name: "Linter Github Workflow"
      run: |
        bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash)
        ./actionlint -color
      shell: bash

    - name: "Palabras prohibidas en código"
      run: |
        ! grep -E 'cfenv' -rn \
        --exclude-dir=.github \
        --include=package.json \
        --include=*.js \
        .
           
    - name: "CFN Lint - Linter de Cloudformation Frontend"
      if: ${{ env.AWS_R53_SUB_DOMAIN == 'webs'}}
      run: |
        pip install cfn-lint==0.73.2
        cfn-lint service-components.yaml

    - name: "CFN Lint - Linter de Cloudformation Backend"
      if: ${{ env.AWS_R53_SUB_DOMAIN == 'apis'}}
      run: |
        pip install cfn-lint==0.73.2
        cfn-lint service-components.yaml
        cfn-lint api-gateway.yaml

    - uses: actions/setup-java@v3
      if: ${{ (env.JAVA_BUILD_TOOL == 'maven' || env.JAVA_BUILD_TOOL == 'gradle') && env.SONAR_SCAN == 'true'}}
      with:
        distribution: temurin
        java-version: ${{env.JAVA_VERSION}}
        cache: ${{env.JAVA_BUILD_TOOL}}

    - name: Setup Gradle
      if: ${{ env.JAVA_BUILD_TOOL == 'gradle' && env.SONAR_SCAN == 'true'}}
      uses: gradle/gradle-build-action@v2
    
    - name: Execute Gradle SonarQube
      if: ${{ env.JAVA_BUILD_TOOL == 'gradle' && env.SONAR_SCAN == 'true'}}
      run: |
        chmod +x gradlew
        sudo ./gradlew sonar -D "sonar.projectKey=${{env.SONAR_PROJECT_KEY}}" -D "sonar.host.url=${{ secrets.SONARQUBE_HOST }}" -D "sonar.login=${{ secrets.SONARQUBE_TOKEN }}" -D "sonar.projectName=${{env.SONAR_PROJECT_KEY}}"

    - name: Execute Maven SonarQube
      if: ${{ env.JAVA_BUILD_TOOL == 'maven' && env.SONAR_SCAN == 'true'}}
      run: |
        mvn clean verify sonar:sonar -D "sonar.projectKey=${{env.SONAR_PROJECT_KEY}}" -D "sonar.host.url=${{ secrets.SONARQUBE_HOST }}" -D "sonar.login=${{ secrets.SONARQUBE_TOKEN }}" -D "sonar.projectName=${{env.SONAR_PROJECT_KEY}}"
        
    
    - name: SonarQube Scan
      if: ${{ (env.JAVA_BUILD_TOOL != 'maven' && env.JAVA_BUILD_TOOL != 'gradle') && env.SONAR_SCAN == 'true'}}
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST }}
      with:
        args: >
          -Dsonar.sources=.
          -Dsonar.projectKey=${{env.SONAR_PROJECT_KEY}}

    - uses: docker/login-action@v2
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_PASS }}

    # Configurar paketo https://paketo.io/
    - id: setup-pack
      uses: buildpacks/github-actions/setup-pack@v4.9.0

    # Autenticar en AWS sin utilizar secretos
    - name: Configure AWS Deploy Role 
      uses: aws-actions/configure-aws-credentials@v1-node16
      with: 
        aws-region: ${{ env.AWS_DEPLOY_REGION }}
        role-to-assume: arn:aws:iam::${{secrets.TEST_AWS_ACCOUNT_ID}}:role/github-actions-deploy-role
        role-session-name: ${{ github.event.repository.name }}-Build

    - name: Build image
      if: ${{ env.BUILDPACK_LANGUAGE != 'paketo-buildpacks/java'}}
      run: |
        aws ssm get-parameter --name /${{ env.AWS_ECS_CLUSTER }}/${{ env.SERVICE_NAME }}-build-vars --region ${{env.AWS_DEPLOY_REGION}}  --with-decryption --query "Parameter.Value" --output text >> .buildpackenv || echo "WARNING: No se encontró el parámetro con las variables de construcción."
        buildpacks=()
        for bp in $BUILDPACK_LANGUAGE; do buildpacks+=(--buildpack "$bp"); done
        echo Buikdpack a usar: "${buildpacks[@]}"
        pack build ${{ env.DOCKER_ORG }}/${{ env.SERVICE_NAME }}:${{ github.sha }}-test \
        --builder ${{ env.BUILDPACK_BUILDER }} \
        --path . \
        --env-file ${{ env.BUILDPACK_ENV_FILE }} "${buildpacks[@]}"

    - name: Check Docker Repository
      run: |
        echo "Se está validando si existe el repositorio ${{ env.SERVICE_NAME }}"
        TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKER_HUB_USER }}", "password": "${{ secrets.DOCKER_HUB_PASS }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
        IS_PRIVATE=$(curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${{ env.DOCKER_ORG }}/${{ env.SERVICE_NAME }} | jq -r '.is_private')
        if [ "$IS_PRIVATE" = "true" ]; then echo "El repositorio existe"; else echo "El repositorio no existe, solicita su creación" && exit 1; fi

    - name: Push Image
      run: docker push ${{ env.DOCKER_ORG }}/${{ env.SERVICE_NAME }}:${{ github.sha }}-test


  Deploy:
    needs: Build
    name: Deploy
    runs-on:
    - ubuntu-latest
    steps:
    - id: checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    # Autenticar en AWS sin utilizar secretos
    - name: Configure AWS Deploy Role 
      uses: aws-actions/configure-aws-credentials@v1-node16
      with: 
        aws-region: ${{ env.AWS_DEPLOY_REGION }}
        role-to-assume: arn:aws:iam::${{secrets.TEST_AWS_ACCOUNT_ID}}:role/github-actions-deploy-role
        role-session-name: ${{ github.event.repository.name }}-Deploy

    - name: Reemplazo de ARN's en Task Definition
      run: |
        jq -r '.containerDefinitions[].repositoryCredentials.credentialsParameter |= "${{ secrets.TEST_ARN_CREDENTIALS_DOCKERHUB }}"' task-definition.json > tmp.json
        mv tmp.json task-definition.json

        jq -r '.taskRoleArn |= "arn:aws:iam::${{secrets.TEST_AWS_ACCOUNT_ID}}:role/${{ env.AWS_ECS_CLUSTER }}-ECS-Role"' task-definition.json > tmp.json
        mv tmp.json task-definition.json

        jq -r '.executionRoleArn |= "arn:aws:iam::${{secrets.TEST_AWS_ACCOUNT_ID}}:role/${{ env.AWS_ECS_CLUSTER }}-ECS-Role"' task-definition.json > tmp.json
        mv tmp.json task-definition.json
        
        jq -r '.containerDefinitions[].name |= "${{ env.SERVICE_NAME }}"' task-definition.json > tmp.json
        mv tmp.json task-definition.json

        jq -r '.family |= "${{ env.SERVICE_NAME }}"' task-definition.json > tmp.json
        mv tmp.json task-definition.json

        jq -r '.containerDefinitions[].logConfiguration.options."awslogs-group" |= "/ecs/${{ env.AWS_ECS_CLUSTER }}/${{ env.SERVICE_NAME }}"' task-definition.json > tmp.json
        mv tmp.json task-definition.json

        jq -r '.containerDefinitions[].logConfiguration.options."awslogs-region" |= "${{ env.AWS_DEPLOY_REGION }}"' task-definition.json > tmp.json
        mv tmp.json task-definition.json

        jq -r '.containerDefinitions[].portMappings[].containerPort |= "${{ env.SERVICE_PORT }}"' task-definition.json > tmp.json
        mv tmp.json task-definition.json

        jq -r '.containerDefinitions[].environment += [{"name": "BIND_PORT", "value": "${{ env.SERVICE_PORT }}"}]' task-definition.json > tmp.json
        mv tmp.json task-definition.json

        jq -r '.containerDefinitions[].environment += [{"name": "BIND", "value": "0.0.0.0"}]' task-definition.json > tmp.json
        mv tmp.json task-definition.json

        jq -r '.cpu |= "${{ env.TASK_CPU }}"' task-definition.json > tmp.json
        mv tmp.json task-definition.json

        jq -r '.memory |= "${{ env.TASK_MEMORY }}"' task-definition.json > tmp.json
        mv tmp.json task-definition.json
        
        sed -i 's/CLUSTER_NAME/'"${{ env.AWS_ECS_CLUSTER }}"'/g' task-definition.json

        cat task-definition.json
    - name: Importación de secretos del servicio
      run: |
        pip install boto3==1.26.109
        python3 import_secrets.py -r ${{ env.AWS_DEPLOY_REGION }} -c ${{ env.AWS_ECS_CLUSTER }} -s ${{ env.SERVICE_NAME }} -t task-definition.json
        cat task-definition.json

    - name: Render Amazon ECS Task Definition
      id: render-task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1 
      with: 
        task-definition: task-definition.json
        container-name: ${{ env.SERVICE_NAME }}
        image: docker.io/${{ env.DOCKER_ORG }}/${{ env.SERVICE_NAME }}:${{ github.sha }}-test

    - name: Deploy Amazon ECS task definition 
      id: deploy-task-definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-task-definition.outputs.task-definition }}

    - name: Task Definition ARN
      id: task-definition
      run: |
        echo ${{ steps.deploy-task-definition.outputs.task-definition-arn }}

    - name: Install SAM CLI
      uses: aws-actions/setup-sam@v2
      with: 
        version: ${{ env.AWS_SAM_VERSION }}

    - name: Crear/Actualizar servicio ECS Frontend
      if: ${{ env.AWS_R53_SUB_DOMAIN == 'webs'}}
      run: >-
        sam deploy
        -t service-components.yaml
        --stack-name service-${{ env.SERVICE_NAME }}
        --no-fail-on-empty-changeset
        --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
        --no-confirm-changeset
        --s3-bucket sam-bucket-${{secrets.TEST_AWS_ACCOUNT_ID}}
        --s3-prefix ${{ env.SERVICE_NAME }}-service
        --tags "CommitHash=${{ github.sha }}
        ClusterECS=${{ env.AWS_ECS_CLUSTER }}
        Repo=${{ github.repository }}
        Service=${{ env.SERVICE_NAME }}"
        --parameter-overrides="ClusterName='${{ env.AWS_ECS_CLUSTER }}'
        ContainerPort='${{ env.SERVICE_PORT }}'
        NumeroBalanceador='${{ env.AWS_FRONT_ALB_NUMBER }}'
        DominioBase='${{ env.AWS_R53_BASE_DOMAIN }}'
        Route53HostedZoneId='${{ env.AWS_R53_HOSTED_ZONE_ID }}'
        SubdominioBalanceador='${{ env.AWS_R53_SUB_DOMAIN }}${{ env.AWS_FRONT_ALB_NUMBER }}'
        HealthPath='${{ env.SERVICE_HEALTH_PATH }}'
        HealthCode='${{ env.SERVICE_HEALTH_CODE }}'
        NombreVPC='${{ env.AWS_VPC_NAME }}'
        PrioridadListener='${{ env.AWS_FRONT_ALB_PRIORITY }}'
        ServiceName='${{ env.SERVICE_NAME }}'
        TaskDefinitionARN='${{ steps.deploy-task-definition.outputs.task-definition-arn }}'
        DominioOpcional='${{ env.OPTIONAL_DOMAIN }}'
        HealthCount='${{ env.SERVICE_HEALTH_COUNT }}'
        HealthTimeout='${{ env.SERVICE_HEALTH_TIMEOUT }}'
        HealthIntervalo='${{ env.SERVICE_HEALTH_INTERVALO }}'
        ServiceReplicas='${{ env.SERVICE_REPLICAS }}'"

    - name: Crear/Actualizar servicio ECS Backend
      if: ${{ env.AWS_R53_SUB_DOMAIN == 'apis'}}
      run: >-
        sam deploy
        -t service-components.yaml
        --stack-name service-${{ env.SERVICE_NAME }}
        --no-fail-on-empty-changeset
        --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
        --no-confirm-changeset
        --s3-bucket sam-bucket-${{secrets.TEST_AWS_ACCOUNT_ID}}
        --s3-prefix ${{ env.SERVICE_NAME }}-service
        --tags "CommitHash=${{ github.sha }}
        ClusterECS=${{ env.AWS_ECS_CLUSTER }}
        Repo=${{ github.repository }}
        Service=${{ env.SERVICE_NAME }}"
        --parameter-overrides="NombreVPC='${{ env.AWS_VPC_NAME }}'
        ApiAlbNumber='${{ env.AWS_ALB_NUMBER }}'
        ClusterName='${{ env.AWS_ECS_CLUSTER }}'
        ServiceName='${{ env.SERVICE_NAME }}'
        TaskDefinitionARN='${{ steps.deploy-task-definition.outputs.task-definition-arn }}'
        HealthPath='${{ env.SERVICE_HEALTH_PATH }}'
        HealthCode='${{ env.SERVICE_HEALTH_CODE }}'
        ContainerPort='${{ env.SERVICE_PORT }}'
        PrioridadListener='${{ env.AWS_ALB_PRIORITY }}'
        DominioBase='${{ env.AWS_R53_BASE_DOMAIN }}'
        SubdominioBalanceador='${{ env.AWS_R53_SUB_DOMAIN }}${{ env.AWS_ALB_NUMBER }}'
        HealthCount='${{ env.SERVICE_HEALTH_COUNT }}'
        HealthTimeout='${{ env.SERVICE_HEALTH_TIMEOUT }}'
        HealthIntervalo='${{ env.SERVICE_HEALTH_INTERVALO }}'
        ServiceReplicas='${{ env.SERVICE_REPLICAS }}'"
    
    - name: Crear/Actualizar API Gateway
      if: ${{ env.AWS_R53_SUB_DOMAIN == 'apis'}}
      run: >-
        sam deploy
        -t api-gateway.yaml
        --stack-name api-${{ env.SERVICE_NAME }}
        --no-fail-on-empty-changeset
        --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
        --no-confirm-changeset
        --s3-bucket sam-bucket-${{secrets.TEST_AWS_ACCOUNT_ID}}
        --s3-prefix ${{ env.SERVICE_NAME }}-api
        --tags "CommitHash='${{ github.sha }}'
        ClusterECS='${{ env.AWS_ECS_CLUSTER }}'
        Repo='${{ github.repository }}'
        Service='${{ env.SERVICE_NAME }}'"
        --parameter-overrides="NombreVPC='${{ env.AWS_VPC_NAME }}'
        ApiAlbNumber='${{ env.AWS_ALB_NUMBER }}'
        ServiceName='${{ env.SERVICE_NAME }}'
        ClusterName='${{ env.AWS_ECS_CLUSTER }}'
        DominioBase='${{ env.AWS_R53_BASE_DOMAIN }}'
        Route53HostedZoneId='${{ env.AWS_R53_HOSTED_ZONE_ID }}'
        SubdominioBalanceador='${{ env.AWS_R53_SUB_DOMAIN }}${{ env.AWS_ALB_NUMBER }}'"

    - name: URL del servicio
      run: |
        echo "Puedes consultar tu servicio en la siguiente URL https://${{ env.SERVICE_NAME }}.${{env.AWS_R53_SUB_DOMAIN}}${{env.AWS_ALB_NUMBER}}${{env.AWS_FRONT_ALB_NUMBER}}.${{env.AWS_R53_BASE_DOMAIN}}"
        {
          echo "-----------------------"
          echo "## URL"
          echo "- **https://${{ env.SERVICE_NAME }}.${{env.AWS_R53_SUB_DOMAIN}}${{env.AWS_ALB_NUMBER}}${{env.AWS_FRONT_ALB_NUMBER}}.${{env.AWS_R53_BASE_DOMAIN}}**"
        }  >> "$GITHUB_STEP_SUMMARY"

    - name: Agregar valores de API Gateway a SSM
      if: ${{ env.AWS_R53_SUB_DOMAIN == 'apis'}}
      run: |
        echo "Se obtiene APIKEY ID de los exports del stack"
        # shellcheck disable=SC2016
        APIKEY_ID=$(aws cloudformation --region ${{ env.AWS_DEPLOY_REGION }} describe-stacks --stack-name api-${{ env.SERVICE_NAME }} \
        --query 'Stacks[0].Outputs[?OutputKey==`ApiKey`].OutputValue' --output text)

        echo "Se obtiene el valor de la API Key"
        APIKEY_QUOTES=$(aws apigateway get-api-key --api-key "$APIKEY_ID" --include-value --region ${{ env.AWS_DEPLOY_REGION }} --query 'value')

        temp="${APIKEY_QUOTES%\"}"
        APIKEY="${temp#\"}"
        ENDPOINT="https://${{ env.SERVICE_NAME }}.apis${{env.AWS_ALB_NUMBER}}.${{env.AWS_R53_BASE_DOMAIN}}"

        SSM_CONTENT=$( jq -n \
                          --arg ep "$ENDPOINT" \
                          --arg ak "$APIKEY" \
                          '{ENDPOINT: $ep, APIKEY: $ak}' )
           
        echo "Se agrega API Key y endpoint en SSM"
        aws ssm put-parameter --name /${{ env.AWS_ECS_CLUSTER }}/${{ env.SERVICE_NAME }}-api --value \
        "$SSM_CONTENT" --overwrite --type SecureString --region ${{ env.AWS_DEPLOY_REGION }}
