AWSTemplateFormatVersion: "2010-09-09"

Description: "Componentes necesarios para exponer un Frontend"

Parameters:

  Cluster:
    Type: String
    Description: Nombre del cluster en el que se creará el Frontend

  ContainerPort:
    Type: Number
    Default: 8000
    Description: port number exposed from the container image.

  FrontAlbNumber:
    Type: String
    Default: "1"

  FrontDomain:
    Type: String
    Default: "hello.fronts1.test.timelineage.site"
    Description: Dominio en el que se expondrá el Frontend

  HealthPath:
    Type: String
    Description: Path de health del servicio

  NombreVPC:
    Type: String
    Default: NMP-Servicios

  PrioridadListener:
    Type: Number
    Description: Prioridad de de la regla en el listener. No se debe repetir.

  ServiceName:
    Type: String
    Default: paketo
    Description: Nombre del microservicio

  TaskDefinitionARN:
    Type: String
    Description: ARN de Task Definition

  HostedZoneId:
    Type: String
    Description: Id de la zona en la que se creará el Dominio
    Default: Z05524491VQ38G93MIPQD

Resources:
  TaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub /ecs/${ServiceName}
      RetentionInDays: 30

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: SG para ms
      GroupName: !Sub ${ServiceName}-sg
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: "10.0.0.0/16"
          FromPort: !Ref ContainerPort
          IpProtocol: tcp
          ToPort: !Ref ContainerPort
      VpcId: !ImportValue
        "Fn::Sub": ${NombreVPC}-VPC

  ElasticLoadBalancingV2TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 300
      HealthCheckPath: !Ref HealthPath
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: !Sub ${ServiceName}-1
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: "false"
        - Key: deregistration_delay.timeout_seconds
          Value: "300"
        - Key: stickiness.app_cookie.cookie_name
          Value: ""
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: "86400"
        - Key: slow_start.duration_seconds
          Value: "0"
        - Key: stickiness.app_cookie.duration_seconds
          Value: "86400"
        - Key: load_balancing.algorithm.type
          Value: round_robin
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue
        "Fn::Sub": ${NombreVPC}-VPC

  FrontALBListenerRuleHTTPS:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Weight: 1
      Conditions:
        - Field: host-header
          Values:
            - "Fn::Sub": "${FrontDomain}"
      ListenerArn: !ImportValue
        Fn::Sub: "${NombreVPC}-FrontAlbListenerHTTPS${FrontAlbNumber}"
      Priority: !Ref PrioridadListener

  FrontALBListenerRuleHTTP:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Weight: 1
      Conditions:
        - Field: host-header
          Values:
            - "Fn::Sub": "${FrontDomain}"
      ListenerArn: !ImportValue
        Fn::Sub: "${NombreVPC}-FrontAlbListenerHTTP${FrontAlbNumber}"
      Priority: !Ref PrioridadListener

  FrontSubDomain:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: !Sub "Subdominio para Frontend ${ServiceName}"
      RecordSets:
        - Name: !Ref FrontDomain
          Type: A
          AliasTarget:
            DNSName:
              Fn::ImportValue: !Sub "${NombreVPC}-FrontAlbDNS${FrontAlbNumber}"
            EvaluateTargetHealth: true
            HostedZoneId:
              Fn::ImportValue: !Sub "${NombreVPC}-FrontAlbHostedZone${FrontAlbNumber}"

  ECSService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - TaskLogGroup
      - FrontALBListenerRuleHTTPS
      - FrontALBListenerRuleHTTP
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      LoadBalancers: 
        - 
          TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
          ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
      DesiredCount: 1
      LaunchType: "FARGATE"
      PlatformVersion: "1.4.0"
      TaskDefinition: !Ref TaskDefinitionARN
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration: 
        AwsvpcConfiguration: 
          AssignPublicIp: "DISABLED"
          SecurityGroups: 
            - !Ref EC2SecurityGroup
          Subnets: 
            - Fn::ImportValue: !Sub "${NombreVPC}-PrivateSubnet1a"
      HealthCheckGracePeriodSeconds: 0
      SchedulingStrategy: "REPLICA"
      DeploymentController: 
          Type: "ECS"